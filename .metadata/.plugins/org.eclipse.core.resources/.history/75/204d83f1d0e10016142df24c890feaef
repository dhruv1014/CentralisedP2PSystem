package client;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.net.Socket;
import java.util.Scanner;

public class P2PClient {

	public static void main(String[] args){
		// TODO Auto-generated method stub
		try{
			Socket clientSocket = new Socket("localhost", 5008);
			Scanner sc = new Scanner(System.in);
			Scanner clientIn = new Scanner(clientSocket.getInputStream());
			String option, check;
			do{
				System.out.println("****MENU****");
				System.out.println("1. Register Files");
				System.out.println("2. Search for a File");
				System.out.println("3. Obtain a File");
				System.out.println("4. Exit");

				option = sc.nextLine();
				PrintStream clientOut = new PrintStream(clientSocket.getOutputStream());
				switch(option){
				case "1":
					clientOut.println(option);

					//the next two lines are just to check if the server is responding
					check = clientIn.nextLine();
					System.out.println("Client Server Working!!!"+ check);
					break;
				case "2":
					clientOut.println(option);

					//the next two lines are just to check if the server is responding
					check = clientIn.nextLine();
					System.out.println("Client Server Working!!!"+ check);
					break;
				case "3":
					clientOut.println(option);

					/*the next two lines are just to check if the server is responding
					check = clientIn.nextLine();
					System.out.println("Client Server Working!!!"+ check);*/

					System.out.println("Enter the name of the file to be downloaded:");
					String FileName = sc.nextLine();
					System.out.println("Enter the Client ID");
					String reqClientID = sc.nextLine();
					System.out.println("Enter the Input port");
					int InputPort = sc.nextInt();

					//long startTime = System.currentTimeMillis();
					//retrieve(FileName,reqClientID,InputPort);
					//long endTime = System.currentTimeMillis();
					//System.out.println("Time required: "+(endTime-startTime)+"msec");
					break;


				case "4":
					clientOut.println(option);
					sc.close();
					clientIn.close();
					clientSocket.close();
					//the next two lines are just to check if the server is responding
					check = clientIn.nextLine();
					System.out.println("Client Server Working!!!"+ check);
					System.exit(0);
					break;
				}

			}while(!(option.equals("4")));


		}
		catch(IOException e){
			e.printStackTrace();
		}
	}
	/*
	 * Retrieve function -  invoked by a peer to download a file from another peer
	 */
	public static void retrieve(String fileName, String clientId, int inpPort){
		// path of the folder in which downloaded files will be stored
		String downPath = "D:/Project/HW1/SharedFolder/"+inpPort+"/";

		//Check if the folder exists
		//Create if it doesn't exist
		File directory = new File(downPath);
		if(!directory.exists())
		{
			System.out.println("Creating a new folder named: "+inpPort);
			directory.mkdir();
			System.out.println("The file will be found at: "+downPath);
		}

		//Make a connection with server to get file from
		int portNumber = Integer.parseInt(clientId);
		Socket peerClient = new Socket("localhost",portNumber);
		System.out.println("Downloading File Please wait ...");

		//Input & Output for socket Communication
		Scanner in = new Scanner(peerClient.getInputStream());
		PrintStream out = new PrintStream(directory);

		//System.out.println("writing filename to serverclient");
		out.writeUTF(fileName);
		out.writeUTF(clientId);
		//System.out.println("Wrote filename to serverclient");

		String strFilePath = downPath + fileName;

		long buffSize = in.readLong();
		int newBuffSize = (int) buffSize;

		byte[] b = new byte[newBuffSize];

		int numberofbytesread = in.read(b);

		//Write the file requested by the peer
		try 
		{
			FileOutputStream writeFileStream = new FileOutputStream(strFilePath);

			writeFileStream.write(b);

			writeFileStream.close();

			System.out.println("Downloaded Successfully");
			System.out.println("Display file " + fileName);

			peerClient.close();

		} catch (FileNotFoundException ex) 
		{
			System.out.println("FileNotFoundException : " + ex);
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
	}
}
